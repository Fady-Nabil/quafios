void update_screen(unsigned char *fbuf) {

    /* copy to tbuf */
    int i;
    for (i = 0; i < vga_scanline*vga_height; i++)
        tbuf[i] = fbuf[i];

    /* draw program title */
    draw_text(tbuf);

    /* write to VGA driver */
    fwrite(tbuf, vga_scanline*vga_height, 1, vga);

}

void mandelbrot(unsigned char *fbuf) {

    /* plot Mandelbrot set, escape time algorithm */
    int max_iteration = 1000; /* maximum amount of iterations */

    /* the c variable */
    double *c_r, *c_i; /* real and imaginary parts of c */

    /* the z variable */
    double *z_r, *z_i;

    /* temporary variable */
    double tmp;

    /* counters: */
    int i, j, k, l;

    /* color of the pixel */
    int r, g, b;
    int sum1, sum2;

    /* how does this work?
     * The algorithm loops on every pixel on the screen.
     * any pixel represents an imaginary number c...
     * we want to know whether c is in Mandelbrot set or not.
     * For c to be in mandelbrot set, Zn must remain bounded
     * when (starting with Z0 = 0) applying the following
     * iteration:
     *     Z(n+1) = (Zn)^2 + c.
     * C & Zn are complex numbers.
     * The algorithm iterates until Zn becomes unbounded or
     * maximum number of iterations reaches.
     * The screen is scaled as follows:
     * - The R-axis is from -2.5 to 1.
     * - The I-axis is from -1 to 1.
     */

    /* allocate the z & c arrays and initialize them */
    z_r = malloc(vga_width*vga_height*sizeof(double));
    z_i = malloc(vga_width*vga_height*sizeof(double));
    c_i = malloc(vga_width*vga_height*sizeof(double));
    c_r = malloc(vga_width*vga_height*sizeof(double));

    for (i = 0; i < vga_height; i++) {
        for (j = 0; j < vga_width; j++) {
            /* i represents y, j represents x */
            l = i*vga_width + j;

            /* z is initially zero */
            z_r[l] = z_i[l] = 0;

             /* calculate values of c_r and c_im */
            c_r[l] = ((double)j/(double)vga_width )*((double)3.5)-(double)2.5;
            c_i[l] = ((double)i/(double)vga_height)*((double)2)-(double)1;

            /* initialize pixel color to white */
            draw_pixel(fbuf, j, i, 0xFFFFFF);
        }
    }

    /* write to vga */
    update_screen(fbuf);

    /* iterations */
    for (k = 0; k < max_iteration; k++) {
        /* loop on all pixels */
        for (i = 0; i < vga_height; i++) {
            for (j = 0; j < vga_width; j++) {
                /* i represents y, j represents x */
                l = i*vga_width + j;

                /* z is unbounded? we assume that z
                 * is unbounded if |z| >= 2
                 */
                if (z_r[l]*z_r[l] + z_i[l]*z_i[l] >= 2*2) {
                    /* unbounded */
                    if (get_pixel(fbuf, j, i) == 0xFFFFFF) {
                        /* pick a color */
                        int r, g, b, rgb;
                        if (k < 20) {
                            b = k*12;
                            g = 0;
                        } else if (k < 100) {
                            b = ((100-k)*2);
                            g = 0;
                        } else {
                            b = (k/100)*20;
                            g = 0;
                        }
                        r = 0;
                        rgb = ((r&0xFF)<<16)+((g&0xFF)<<8)+(b&0xFF);
                        draw_pixel(fbuf, j, i, rgb);

                    }
                    continue;
                }

                /* Znew = (Zold)^2 + C
                 *      = z_r^2 + (2*z_r*z_i)j - (z_i)^2 + c_r + (c_i)j
                 *      = z_r^2 - (z_i)^2 + c_r + (2*z_r*z_i + c_i)j
                 */
                tmp = z_r[l]*z_r[l] - z_i[l]*z_i[l] + c_r[l];
                z_i[l] = 2*z_r[l]*z_i[l] + c_i[l];
                z_r[l] = tmp;

            }
        }

        /* write to vga */
        update_screen(fbuf);

    }




}

