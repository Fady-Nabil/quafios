
#include "fs/diskfs.h"

#define DISK_BASE 0x1000000

static char *buffer = (char *) 0x20000; // temporary buffer...

void read_cluster(diskfs_sb_t *sb, diskfs_pos_t clus, char *dest) {

	unsigned int base = DISK_BASE /* image location */ +
			    512 /* boot sector */ +
			    clus*sb->block_size /* cluster offset */;

	int i;
	for(i = 0; i < sb->block_size; i++)
		dest[i] = ((unsigned char *) base)[i];

}

void read_inode(diskfs_sb_t *disksb, diskfs_inode_t *inode, diskfs_ino_t ino) {

	// calculate the location of the cluster that
	// contains the desired inode.
	unsigned int inodes_per_cluster = disksb->block_size/
					  sizeof(diskfs_inode_t);
	diskfs_blk_t cluster = ino/inodes_per_cluster +
	                       disksb->inode_start;

	// read the cluster into memory:
	read_cluster(disksb, cluster, buffer);

	// do the read!
	int i;
	for (i = 0; i < sizeof(diskfs_inode_t); i ++)
		((char *) inode)[i] = buffer[(ino%inodes_per_cluster)*
			              sizeof(diskfs_inode_t)+i];

}

diskfs_blk_t get_file_block(diskfs_sb_t *sb,
                            diskfs_inode_t *inode,
		            diskfs_blk_t blk_off) {

	// convert blk_off (which is relative to file)
	// to a block number relative to the beginning
	// of the filesystem.

	diskfs_lvl_t lvl = blk_to_lvl(sb, blk_off);
	diskfs_blk_t  blk;
	diskfs_blk_t *ptr;
	int i;

	for (i = 0; i <= lvl.level; i++) {

		// load the table into memory:
		if (!i) {
			ptr = inode->ptr;
		} else {
			read_cluster(sb, blk, buffer);
			ptr = (diskfs_blk_t *) buffer;
		}

		// get pointer for next level (if there isn't):
		if (!(blk = ptr[lvl.ptr[i]])) {
			break; // exit the loop.
		}
	}

	// done
	return blk;

}


void diskfs_load(char *path, unsigned int addr) {

	// Get superblock
	diskfs_sb_t *sb = (diskfs_sb_t *)(DISK_BASE+512);

	// Read Root Inode:
	diskfs_inode_t parent;
	read_inode(sb, &parent, 2);

	// loop on path components
	int i = 0;
	while (path[i]) {

		// Read name:
		char name[32] = {0};
		int j = 0;

		while (path[i] == '/')
			i++; // skip slash.

		while (path[i] != 0 && path[i] != '/')
			name[j++] = path[i++];

		if (name[0] == 0)
			continue;

		// loop inside current directory:
		printf("blk %x\n", get_file_block(sb, &parent, 0));
		printf("comp: %s\n", name);


	}

	printf("am done!\n");

}
